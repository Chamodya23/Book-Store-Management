package com.BookStore.BookStoreManagement.customerservice.service.implementation;

import com.BookStore.BookStoreManagement.customerservice.entity.Customer;
import com.BookStore.BookStoreManagement.customerservice.repository.CustomerRepository;
import com.BookStore.BookStoreManagement.customerservice.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerRepository customerRepository; // inject the customerRepository to access the data

    /**
     * save a new customer to the repository
     * @param customer the customer object to be saved
     * @return ResponseEntity contain the saved customer or an error message
     */
    @Override
    public ResponseEntity<?> saveCustomer(Customer customer) {
        try {
            return  ResponseEntity.ok(customerRepository.save(customer)); //save the customer and return the result

        } catch (Exception e) {

            return ResponseEntity.badRequest().body(e.getMessage()); //return a bad request response if an exception occurs
        }


    }

    /**
     * Retrieves all customers from the repository
     * @return ResponseEntity contain the list of customer or an error message
     */
    @Override
    public ResponseEntity<?> viewCustomer() {
        try {
            return  ResponseEntity.ok(customerRepository.findAll()); //fetch all customers and return the result

        } catch (Exception e) {

            return ResponseEntity.badRequest().body(e.getMessage()); //return a bad request response if an exception occurs
        }


    }

    /**
     * updates an existing customer's details
     * @param  newCustomer the customer object with updated details
     * @param id the id of the customer to be updated
     * @return ResponseEntity contain the updated customer or an error message
     */

    @Override
    public ResponseEntity<?> updateCustomer(Customer newCustomer, Integer id) {
        try {
            Optional<Customer> existCus = customerRepository.findById(id);
            Customer customer =existCus.get();
            customer.setCustomerAddress(newCustomer.getCustomerAddress());//update customer details
            customer.setCustomerEmail(newCustomer.getCustomerEmail());
            customer.setCustomerName(newCustomer.getCustomerName());
            customer.setCustomerMNumber(newCustomer.getCustomerMNumber());
            return  ResponseEntity.ok(customerRepository.save(customer));//save updated customer

        } catch (Exception e) {

            return ResponseEntity.badRequest().body(e.getMessage());
        }


    }

    /**
     * deletes a customer by id
     * @param id the id of the customer to be deleted
     * @return
     */

    @Override
    public ResponseEntity<?> deleteCustomer(Integer id) {
        try
        {if(customerRepository.findById(id).isPresent())//check if the customer exists
        {
            customerRepository.deleteById(id);
            return  ResponseEntity.ok("Successfully Deleted");
        }else
        {

            return  ResponseEntity.ok("Record is no exist");//return the response that customer does not exist
        }
        } catch (Exception e) {

            return ResponseEntity.badRequest().body(e.getMessage());
        }


    }

    /**
     * search customer
     * @param id the id of the customer to be search
     * @return
     */

    @Override

    public ResponseEntity<?> searchCustomer(Integer id) {
        try
        {if(customerRepository.findById(id).isPresent())//check if the customer exists
        {
            return  ResponseEntity.ok(customerRepository.findById(id));

        }else
        {

            return  ResponseEntity.ok("Record is no exist");//return the response that customer does not exist
        }
        } catch (Exception e) {

            return ResponseEntity.badRequest().body(e.getMessage());//auto generated by the system
        }

    }
}

